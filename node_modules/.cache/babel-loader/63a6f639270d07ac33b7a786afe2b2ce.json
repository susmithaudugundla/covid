{"ast":null,"code":"var _jsxFileName = \"/home/rgukt/Projects/covid-19/src/components/MobX/mobx.js\";\nimport React from 'react';\nimport { withRouter } from \"react-router\";\nimport { observable, decorate, action, computed } from \"mobx\";\nimport { inject, observer, Observer } from \"mobx-react\";\nimport './dark.css';\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialMode = () => {\n      if (window.matchMedia) {\n        if (window.localStorage.getItem(\"mode\") === \"true\") {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return window.matchMedia('(prefers-color-scheme: dark)').matches;\n      }\n    };\n\n    this.change = () => {\n      window.localStorage.setItem(\"mode\", !this.state.darkmode);\n      this.setState(() => ({\n        darkmode: !this.state.darkmode\n      }));\n    };\n\n    this.state = {\n      darkmode: true\n    };\n    this.state.darkmode = this.initialMode();\n    window.localStorage.setItem(\"mode\", this.state.darkmode);\n  }\n\n  render() {\n    console.log(this.state.darkmode, \"render\", window.localStorage.getItem(\"mode\"));\n    return React.createElement(\"div\", {\n      className: this.state.darkmode ? \"light-mode\" : \"dark-mode\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.change,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"toggle\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"darkmode\"));\n  }\n\n}\n/*class TodoList extends React.Component {\n    secondsPassed = 0;\n\n    componentDidMount() {\n        setInterval(() => {\n            this.secondsPassed++\n        }, 1000)\n    }\n\n    render() {\n        return <span>Seconds passed: {this.secondsPassed} </span>\n    }\n}\ndecorate(TodoList, {\n  secondsPassed: observable\n})*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=observer(()=><span>Seconds passed: {timerData.secondsPassed} </span>)\n\nexport default withRouter(TodoList);*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=(()=><Observer>{()=><span>Seconds passed: {timerData.secondsPassed} </span>}</Observer>)\n*/\n\n/*class TodoList extends React.Component {\n    tick = 0\n    increment() {\n        this.tick++;\n        console.log(this.tick);\n    }\n    render() {\n        console.log(\"hello\");\n        return <span>Seconds passed: {this.tick} </span>\n    }\n}\ndecorate(TodoList,{\n    tick:observable,\n    increment:action.bound\n})\n\nconst ticker = new TodoList();\nsetInterval(ticker.increment, 1000);\n*/\n\n/*class TodoList {\n    price = 0\n    amount = 1\n\n    constructor(price) {\n        this.price = price\n    }\n\n    get total() {\n        return this.price * this.amount\n    }\n}\ndecorate(OrderLine, {\n    price: observable,\n    amount: observable,\n    total: computed\n})\n*/\n\n\nexport default withRouter(observer(TodoList));","map":{"version":3,"sources":["/home/rgukt/Projects/covid-19/src/components/MobX/mobx.js"],"names":["React","withRouter","observable","decorate","action","computed","inject","observer","Observer","TodoList","Component","constructor","props","initialMode","window","matchMedia","localStorage","getItem","matches","change","setItem","state","darkmode","setState","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAsCC,QAAtC,QAAsD,MAAtD;AACA,SAAQC,MAAR,EAAgBC,QAAhB,EAAyBC,QAAzB,QAAwC,YAAxC;AACA,OAAO,YAAP;;AAGA,MAAMC,QAAN,SAAuBT,KAAK,CAACU,SAA7B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAQlBC,WARkB,GAQN,MAAI;AACZ,UAAGC,MAAM,CAACC,UAAV,EAAqB;AACjB,YAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,MAAsC,MAAzC,EAAgD;AAC5C,iBAAO,IAAP;AACH,SAFD,MAGI;AACA,iBAAO,KAAP;AACH;AACJ,OAPD,MAQI;AACA,eAAOH,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDG,OAAzD;AACH;AACJ,KApBiB;;AAAA,SAqBlBC,MArBkB,GAqBX,MAAI;AACPL,MAAAA,MAAM,CAACE,YAAP,CAAoBI,OAApB,CAA4B,MAA5B,EAAoC,CAAC,KAAKC,KAAL,CAAWC,QAAhD;AACA,WAAKC,QAAL,CAAc,OAAK;AACfD,QAAAA,QAAQ,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADP,OAAL,CAAd;AAIH,KA3BiB;;AAEd,SAAKD,KAAL,GAAW;AACPC,MAAAA,QAAQ,EAAC;AADF,KAAX;AAGA,SAAKD,KAAL,CAAWC,QAAX,GAAoB,KAAKT,WAAL,EAApB;AACAC,IAAAA,MAAM,CAACE,YAAP,CAAoBI,OAApB,CAA4B,MAA5B,EAAoC,KAAKC,KAAL,CAAWC,QAA/C;AACH;;AAqBDE,EAAAA,MAAM,GAAE;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWC,QAAvB,EAAgC,QAAhC,EAAyCR,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAzC;AACA,WACA;AAAK,MAAA,SAAS,EAAE,KAAKI,KAAL,CAAWC,QAAX,GAAsB,YAAtB,GAAqC,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,KAAKH,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CADA;AAMH;;AArCiC;AAwCtC;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;AAoBA,eAAelB,UAAU,CAACM,QAAQ,CAACE,QAAD,CAAT,CAAzB","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router\";\nimport { observable, decorate, action,computed } from \"mobx\";\nimport {inject, observer,Observer} from \"mobx-react\";\nimport './dark.css';\n\n\nclass TodoList extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            darkmode:true\n        }\n        this.state.darkmode=this.initialMode();\n        window.localStorage.setItem(\"mode\", this.state.darkmode);\n    }\n    initialMode=()=>{\n        if(window.matchMedia){\n            if(window.localStorage.getItem(\"mode\")===\"true\"){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        else{\n            return window.matchMedia('(prefers-color-scheme: dark)').matches;\n        }\n    }\n    change=()=>{\n        window.localStorage.setItem(\"mode\", !this.state.darkmode);\n        this.setState(()=>({\n            darkmode: !this.state.darkmode\n        }));\n       \n    }\n    render(){\n        console.log(this.state.darkmode,\"render\",window.localStorage.getItem(\"mode\"))\n        return(\n        <div className={this.state.darkmode ? \"light-mode\" : \"dark-mode\"}>\n            <button onClick={this.change}>toggle</button>\n            <h1>darkmode</h1>\n        </div>\n        );\n    }\n}\n\n/*class TodoList extends React.Component {\n    secondsPassed = 0;\n\n    componentDidMount() {\n        setInterval(() => {\n            this.secondsPassed++\n        }, 1000)\n    }\n\n    render() {\n        return <span>Seconds passed: {this.secondsPassed} </span>\n    }\n}\ndecorate(TodoList, {\n  secondsPassed: observable\n})*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=observer(()=><span>Seconds passed: {timerData.secondsPassed} </span>)\n\nexport default withRouter(TodoList);*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=(()=><Observer>{()=><span>Seconds passed: {timerData.secondsPassed} </span>}</Observer>)\n*/\n\n/*class TodoList extends React.Component {\n    tick = 0\n    increment() {\n        this.tick++;\n        console.log(this.tick);\n    }\n    render() {\n        console.log(\"hello\");\n        return <span>Seconds passed: {this.tick} </span>\n    }\n}\ndecorate(TodoList,{\n    tick:observable,\n    increment:action.bound\n})\n\nconst ticker = new TodoList();\nsetInterval(ticker.increment, 1000);\n*/\n\n/*class TodoList {\n    price = 0\n    amount = 1\n\n    constructor(price) {\n        this.price = price\n    }\n\n    get total() {\n        return this.price * this.amount\n    }\n}\ndecorate(OrderLine, {\n    price: observable,\n    amount: observable,\n    total: computed\n})\n*/\n\n\nexport default withRouter(observer(TodoList));\n"]},"metadata":{},"sourceType":"module"}