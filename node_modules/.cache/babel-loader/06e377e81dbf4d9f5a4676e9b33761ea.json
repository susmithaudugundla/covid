{"ast":null,"code":"'use strict';\n\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\n\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\n\nconst errorStrictEqual = require('../utils').errorStrictEqual;\n\nconst ServerType = require('./common').ServerType;\n\nconst WRITABLE_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.Standalone, ServerType.Mongos]);\nconst DATA_BEARING_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.RSSecondary, ServerType.Mongos, ServerType.Standalone]);\nconst ISMASTER_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'compression', 'me', 'hosts', 'passives', 'arbiters', 'tags', 'setName', 'setVersion', 'electionId', 'primary', 'logicalSessionTimeoutMinutes', 'saslSupportedMechs', '__nodejs_mock_server__', '$clusterTime'];\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n */\n\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @param {String} address The address of the server\n   * @param {Object} [ismaster] An optional ismaster response for this server\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign({\n      minWireVersion: 0,\n      maxWireVersion: 0,\n      hosts: [],\n      passives: [],\n      arbiters: [],\n      tags: []\n    }, ismaster);\n    this.address = address;\n    this.error = options.error;\n    this.roundTripTime = options.roundTripTime || -1;\n    this.lastUpdateTime = Date.now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster); // direct mappings\n\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    }); // normalize case for hosts\n\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /**\n   * @return {Boolean} Is this server available for reads\n   */\n\n\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n  /**\n   * @return {Boolean} Is this server data bearing\n   */\n\n\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /**\n   * @return {Boolean} Is this server available for writes\n   */\n\n\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   *\n   * @param {ServerDescription} other\n   * @return {Boolean}\n   */\n\n\n  equals(other) {\n    return other != null && errorStrictEqual(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && this.me === other.me && arrayStrictEqual(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && (this.electionId ? other.electionId && this.electionId.equals(other.electionId) : this.electionId === other.electionId) && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes;\n  }\n\n}\n/**\n * Parses an `ismaster` message and determines the server type\n *\n * @param {Object} ismaster The `ismaster` message to parse\n * @return {ServerType}\n */\n\n\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\nmodule.exports = {\n  ServerDescription,\n  parseServerType\n};","map":{"version":3,"sources":["/home/rgukt/Projects/covid-19/node_modules/mongodb/lib/core/sdam/server_description.js"],"names":["arrayStrictEqual","require","tagsStrictEqual","errorStrictEqual","ServerType","WRITABLE_SERVER_TYPES","Set","RSPrimary","Standalone","Mongos","DATA_BEARING_SERVER_TYPES","RSSecondary","ISMASTER_FIELDS","ServerDescription","constructor","address","ismaster","options","Object","assign","minWireVersion","maxWireVersion","hosts","passives","arbiters","tags","error","roundTripTime","lastUpdateTime","Date","now","lastWriteDate","lastWrite","opTime","type","parseServerType","forEach","field","me","toLowerCase","map","host","allHosts","concat","isReadable","isWritable","isDataBearing","has","equals","other","setName","setVersion","electionId","primary","logicalSessionTimeoutMinutes","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","secondary","arbiterOnly","RSArbiter","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\nconst errorStrictEqual = require('../utils').errorStrictEqual;\nconst ServerType = require('./common').ServerType;\n\nconst WRITABLE_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.Standalone,\n  ServerType.Mongos\n]);\n\nconst DATA_BEARING_SERVER_TYPES = new Set([\n  ServerType.RSPrimary,\n  ServerType.RSSecondary,\n  ServerType.Mongos,\n  ServerType.Standalone\n]);\n\nconst ISMASTER_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  'compression',\n  'me',\n  'hosts',\n  'passives',\n  'arbiters',\n  'tags',\n  'setName',\n  'setVersion',\n  'electionId',\n  'primary',\n  'logicalSessionTimeoutMinutes',\n  'saslSupportedMechs',\n  '__nodejs_mock_server__',\n  '$clusterTime'\n];\n\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n */\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @param {String} address The address of the server\n   * @param {Object} [ismaster] An optional ismaster response for this server\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign(\n      {\n        minWireVersion: 0,\n        maxWireVersion: 0,\n        hosts: [],\n        passives: [],\n        arbiters: [],\n        tags: []\n      },\n      ismaster\n    );\n\n    this.address = address;\n    this.error = options.error;\n    this.roundTripTime = options.roundTripTime || -1;\n    this.lastUpdateTime = Date.now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster);\n\n    // direct mappings\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    });\n\n    // normalize case for hosts\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for reads\n   */\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /**\n   * @return {Boolean} Is this server data bearing\n   */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /**\n   * @return {Boolean} Is this server available for writes\n   */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   *\n   * @param {ServerDescription} other\n   * @return {Boolean}\n   */\n  equals(other) {\n    return (\n      other != null &&\n      errorStrictEqual(this.error, other.error) &&\n      this.type === other.type &&\n      this.minWireVersion === other.minWireVersion &&\n      this.me === other.me &&\n      arrayStrictEqual(this.hosts, other.hosts) &&\n      tagsStrictEqual(this.tags, other.tags) &&\n      this.setName === other.setName &&\n      this.setVersion === other.setVersion &&\n      (this.electionId\n        ? other.electionId && this.electionId.equals(other.electionId)\n        : this.electionId === other.electionId) &&\n      this.primary === other.primary &&\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes\n    );\n  }\n}\n\n/**\n * Parses an `ismaster` message and determines the server type\n *\n * @param {Object} ismaster The `ismaster` message to parse\n * @return {ServerType}\n */\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\nmodule.exports = {\n  ServerDescription,\n  parseServerType\n};\n"]},"metadata":{},"sourceType":"script"}