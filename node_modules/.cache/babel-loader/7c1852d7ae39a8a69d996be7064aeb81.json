{"ast":null,"code":"'use strict';\n\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\n\nconst EventEmitter = require('events');\n\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\n\nconst uuidV4 = require('./utils').uuidV4;\n\nconst MongoError = require('./error').MongoError;\n\nconst isRetryableError = require('././error').isRetryableError;\n\nconst MongoNetworkError = require('./error').MongoNetworkError;\n\nconst MongoWriteConcernError = require('./error').MongoWriteConcernError;\n\nconst Transaction = require('./transactions').Transaction;\n\nconst TxnState = require('./transactions').TxnState;\n\nconst isPromiseLike = require('./utils').isPromiseLike;\n\nconst ReadPreference = require('./topologies/read_preference');\n\nconst isTransactionCommand = require('./transactions').isTransactionCommand;\n\nconst resolveClusterTime = require('./topologies/shared').resolveClusterTime;\n\nconst isSharded = require('./wireprotocol/shared').isSharded;\n\nconst maxWireVersion = require('./utils').maxWireVersion;\n\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new MongoError('Cannot use a session that has ended');\n\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n/**\n * Options to pass when creating a Client Session\n * @typedef {Object} SessionOptions\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\n */\n\n/**\n * A BSON document reflecting the lsid of a {@link ClientSession}\n * @typedef {Object} SessionId\n */\n\n\nconst kServerSession = Symbol('serverSession');\n/**\n * A class representing a client session on the server\n * WARNING: not meant to be instantiated directly.\n * @class\n * @hideconstructor\n */\n\nclass ClientSession extends EventEmitter {\n  /**\n   * Create a client session.\n   * WARNING: not meant to be instantiated directly\n   *\n   * @param {Topology} topology The current client's topology (Internal Class)\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\n   * @param {SessionOptions} [options] Optional settings\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    clientOptions = clientOptions || {};\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n    this.supports = {\n      causalConsistency: typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = null;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n  /**\n   * The server id associated with this session\n   * @type {SessionId}\n   */\n\n\n  get id() {\n    return this.serverSession.id;\n  }\n\n  get serverSession() {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    }\n\n    return this[kServerSession];\n  }\n  /**\n   * Ends this session on the server\n   *\n   * @param {Object} [options] Optional settings. Currently reserved for future use\n   * @param {Function} [callback] Optional callback for completion of this operation\n   */\n\n\n  endSession(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {};\n\n    if (this.hasEnded) {\n      if (typeof callback === 'function') callback(null, null);\n      return;\n    }\n\n    if (this.serverSession && this.inTransaction()) {\n      this.abortTransaction(); // pass in callback?\n    } // release the server session back to the pool\n\n\n    this.sessionPool.release(this.serverSession);\n    this[kServerSession] = undefined; // mark the session as ended, and emit a signal\n\n    this.hasEnded = true;\n    this.emit('ended', this); // spec indicates that we should ignore all errors for `endSessions`\n\n    if (typeof callback === 'function') callback(null, null);\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n\n\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Used to determine if this session equals another\n   * @param {ClientSession} session\n   * @return {boolean} true if the sessions are equal\n   */\n\n\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n  /**\n   * Increment the transaction number on the internal ServerSession\n   */\n\n\n  incrementTransactionNumber() {\n    this.serverSession.txnNumber++;\n  }\n  /**\n   * @returns {boolean} whether this session is currently in a transaction or not\n   */\n\n\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param {TransactionOptions} options Options for the transaction\n   */\n\n\n  startTransaction(options) {\n    assertAlive(this);\n\n    if (this.inTransaction()) {\n      throw new MongoError('Transaction already in progress');\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n\n    if (isSharded(this.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    } // increment txnNumber\n\n\n    this.incrementTransactionNumber(); // create transaction state\n\n    this.transaction = new Transaction(Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions));\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n\n\n  commitTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'commitTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(this, 'commitTransaction', (err, reply) => err ? reject(err) : resolve(reply));\n    });\n  }\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n\n\n  abortTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'abortTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(this, 'abortTransaction', (err, reply) => err ? reject(err) : resolve(reply));\n    });\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   * @ignore\n   */\n\n\n  toBSON() {\n    throw new Error('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * A user provided function to be run within a transaction\n   *\n   * @callback WithTransactionCallback\n   * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\n   * @returns {Promise} The resulting Promise of operations run within this transaction\n   */\n\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param {WithTransactionCallback} fn\n   * @param {TransactionOptions} [options] Optional settings for the transaction\n   */\n\n\n  withTransaction(fn, options) {\n    const startTime = Date.now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\nconst UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\nconst MAX_TIME_MS_EXPIRED_CODE = 50;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\n\nfunction hasNotTimedOut(startTime, max) {\n  return Date.now() - startTime < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  return isMaxTimeMSExpiredError(err) || !NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) && err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE && err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE;\n}\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null) return false;\n  return err.code === MAX_TIME_MS_EXPIRED_CODE || err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE;\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([TxnState.NO_TRANSACTION, TxnState.TRANSACTION_COMMITTED, TxnState.TRANSACTION_ABORTED]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n  let promise;\n\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }).catch(err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof MongoError && err.hasErrorLabel('TransientTransactionError') && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n\n      if (isMaxTimeMSExpiredError(err)) {\n        if (err.errorLabels == null) {\n          err.errorLabels = [];\n        }\n\n        err.errorLabels.push('UnknownTransactionCommitResult');\n      }\n\n      throw err;\n    }\n\n    if (session.transaction.isActive) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n\n    return maybeRetryOrThrow(err);\n  });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  } // handle any initial problematic cases\n\n\n  let txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (txnState === TxnState.STARTING_TRANSACTION || txnState === TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_COMMITTED || txnState === TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  } // construct and send the command\n\n\n  const command = {\n    [commandName]: 1\n  }; // apply a writeConcern if specified\n\n  let writeConcern;\n\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.w) {\n    writeConcern = {\n      w: session.clientOptions.w\n    };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName === 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n\n      if (e && (e instanceof MongoNetworkError || e instanceof MongoWriteConcernError || isRetryableError(e) || isMaxTimeMSExpiredError(e))) {\n        if (e.errorLabels) {\n          const idx = e.errorLabels.indexOf('TransientTransactionError');\n\n          if (idx !== -1) {\n            e.errorLabels.splice(idx, 1);\n          }\n        } else {\n          e.errorLabels = [];\n        }\n\n        if (isUnknownTransactionCommitResult(e)) {\n          e.errorLabels.push('UnknownTransactionCommitResult'); // per txns spec, must unpin session in this case\n\n          session.transaction.unpinServer();\n        }\n      }\n    } else {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n    }\n\n    callback(e, r);\n  } // The spec indicates that we should ignore all errors on `abortTransaction`\n\n\n  function transactionError(err) {\n    return commandName === 'commitTransaction' ? err : null;\n  }\n\n  if ( // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n  session.transaction.recoveryToken && supportsRecoveryToken(session)) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  } // send the command\n\n\n  session.topology.command('admin.$cmd', command, {\n    session\n  }, (err, reply) => {\n    if (err && isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.transaction.unpinServer();\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return session.topology.command('admin.$cmd', command, {\n        session\n      }, (_err, _reply) => commandHandler(transactionError(_err), _reply));\n    }\n\n    commandHandler(transactionError(err), reply);\n  });\n}\n\nfunction supportsRecoveryToken(session) {\n  const topology = session.topology;\n  return !!topology.s.options.useRecoveryToken;\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @ignore\n */\n\n\nclass ServerSession {\n  constructor() {\n    this.id = {\n      id: new Binary(uuidV4(), Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = Date.now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   * @ignore\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\n   * @return {boolean} true if the session has timed out.\n   */\n\n\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round((Date.now() - this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n\n}\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @ignore\n */\n\n\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n  /**\n   * Ends all sessions in the session pool.\n   * @ignore\n   */\n\n\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(this.sessions.map(session => session.id), () => {\n        this.sessions = [];\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      });\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession\n   * is created.\n   * @ignore\n   * @returns {ServerSession}\n   */\n\n\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   * @ignore\n   * @param {ServerSession} session The session to release to the pool\n   */\n\n\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      } // otherwise, readd this session to the session pool\n\n\n      this.sessions.unshift(session);\n    }\n  }\n\n} // TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\n\n\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.parallelCollectionScan || command.geoNear || command.geoSearch) {\n    return true;\n  }\n\n  if (command.mapReduce && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @ignore\n * @param {ClientSession} session the session tracking transaction state\n * @param {Object} command the command to decorate\n * @param {Object} topology the topology for tracking the cluster time\n * @param {Object} [options] Optional settings passed to calling operation\n * @return {MongoError|null} An error, if some error condition was met\n */\n\n\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    return new MongoError('Cannot use a session that has ended');\n  }\n\n  const serverSession = session.serverSession;\n  serverSession.lastUse = Date.now();\n  command.lsid = serverSession.id; // first apply non-transaction-specific sessions data\n\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = options.willRetryWrite;\n  const shouldApplyReadConcern = commandSupportsReadConcern(command);\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\n  } // now attempt to apply transaction-specific sessions data\n\n\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    } // TODO: the following should only be applied to read operation per spec.\n    // for causal consistency\n\n\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n\n    return;\n  }\n\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\n    return new MongoError(`Read preference in a transaction must be primary, not: ${options.readPreference.mode}`);\n  } // `autocommit` must always be false to differentiate from retryable writes\n\n\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || session.clientOptions.readConcern;\n\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n}\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    resolveClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n}\n\nmodule.exports = {\n  ClientSession,\n  ServerSession,\n  ServerSessionPool,\n  TxnState,\n  applySession,\n  updateSessionFromResponse,\n  commandSupportsReadConcern\n};","map":{"version":3,"sources":["/home/rgukt/Projects/covid-19/node_modules/mongodb/lib/core/sessions.js"],"names":["retrieveBSON","require","EventEmitter","BSON","Binary","uuidV4","MongoError","isRetryableError","MongoNetworkError","MongoWriteConcernError","Transaction","TxnState","isPromiseLike","ReadPreference","isTransactionCommand","resolveClusterTime","isSharded","maxWireVersion","minWireVersionForShardedTransactions","assertAlive","session","callback","serverSession","error","kServerSession","Symbol","ClientSession","constructor","topology","sessionPool","options","clientOptions","Error","ServerSessionPool","hasEnded","undefined","supports","causalConsistency","clusterTime","initialClusterTime","operationTime","explicit","owner","defaultTransactionOptions","Object","assign","transaction","id","acquire","endSession","inTransaction","abortTransaction","release","emit","advanceOperationTime","greaterThan","equals","buffer","incrementTransactionNumber","txnNumber","isActive","startTransaction","topologyMaxWireVersion","transition","STARTING_TRANSACTION","commitTransaction","endTransaction","Promise","resolve","reject","err","reply","toBSON","withTransaction","fn","startTime","Date","now","attemptTransaction","MAX_WITH_TRANSACTION_TIMEOUT","UNSATISFIABLE_WRITE_CONCERN_CODE","UNKNOWN_REPL_WRITE_CONCERN_CODE","MAX_TIME_MS_EXPIRED_CODE","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","isUnknownTransactionCommitResult","isMaxTimeMSExpiredError","has","codeName","code","writeConcernError","attemptTransactionCommit","catch","hasErrorLabel","USER_EXPLICIT_TXN_END_STATES","NO_TRANSACTION","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","state","promise","TypeError","then","maybeRetryOrThrow","errorLabels","push","commandName","txnState","TRANSACTION_COMMITTED_EMPTY","command","writeConcern","w","wtimeout","maxTimeMS","commandHandler","e","r","idx","indexOf","splice","unpinServer","transactionError","recoveryToken","supportsRecoveryToken","_err","_reply","s","useRecoveryToken","ServerSession","SUBTYPE_UUID","lastUse","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","sessions","endAllPooledSessions","length","endSessions","map","logicalSessionTimeoutMinutes","shift","pooledSession","pop","unshift","commandSupportsReadConcern","aggregate","count","distinct","find","parallelCollectionScan","geoNear","geoSearch","mapReduce","out","inline","applySession","lsid","isRetryableWrite","willRetryWrite","shouldApplyReadConcern","Long","fromNumber","readConcern","afterClusterTime","readPreference","primary","mode","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\nconst EventEmitter = require('events');\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\nconst uuidV4 = require('./utils').uuidV4;\nconst MongoError = require('./error').MongoError;\nconst isRetryableError = require('././error').isRetryableError;\nconst MongoNetworkError = require('./error').MongoNetworkError;\nconst MongoWriteConcernError = require('./error').MongoWriteConcernError;\nconst Transaction = require('./transactions').Transaction;\nconst TxnState = require('./transactions').TxnState;\nconst isPromiseLike = require('./utils').isPromiseLike;\nconst ReadPreference = require('./topologies/read_preference');\nconst isTransactionCommand = require('./transactions').isTransactionCommand;\nconst resolveClusterTime = require('./topologies/shared').resolveClusterTime;\nconst isSharded = require('./wireprotocol/shared').isSharded;\nconst maxWireVersion = require('./utils').maxWireVersion;\n\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new MongoError('Cannot use a session that has ended');\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n\n/**\n * Options to pass when creating a Client Session\n * @typedef {Object} SessionOptions\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\n */\n\n/**\n * A BSON document reflecting the lsid of a {@link ClientSession}\n * @typedef {Object} SessionId\n */\n\nconst kServerSession = Symbol('serverSession');\n\n/**\n * A class representing a client session on the server\n * WARNING: not meant to be instantiated directly.\n * @class\n * @hideconstructor\n */\nclass ClientSession extends EventEmitter {\n  /**\n   * Create a client session.\n   * WARNING: not meant to be instantiated directly\n   *\n   * @param {Topology} topology The current client's topology (Internal Class)\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\n   * @param {SessionOptions} [options] Optional settings\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    clientOptions = clientOptions || {};\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n\n    this.supports = {\n      causalConsistency:\n        typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = null;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /**\n   * The server id associated with this session\n   * @type {SessionId}\n   */\n  get id() {\n    return this.serverSession.id;\n  }\n\n  get serverSession() {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    }\n\n    return this[kServerSession];\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param {Object} [options] Optional settings. Currently reserved for future use\n   * @param {Function} [callback] Optional callback for completion of this operation\n   */\n  endSession(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    if (this.hasEnded) {\n      if (typeof callback === 'function') callback(null, null);\n      return;\n    }\n\n    if (this.serverSession && this.inTransaction()) {\n      this.abortTransaction(); // pass in callback?\n    }\n\n    // release the server session back to the pool\n    this.sessionPool.release(this.serverSession);\n    this[kServerSession] = undefined;\n\n    // mark the session as ended, and emit a signal\n    this.hasEnded = true;\n    this.emit('ended', this);\n\n    // spec indicates that we should ignore all errors for `endSessions`\n    if (typeof callback === 'function') callback(null, null);\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Used to determine if this session equals another\n   * @param {ClientSession} session\n   * @return {boolean} true if the sessions are equal\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   */\n  incrementTransactionNumber() {\n    this.serverSession.txnNumber++;\n  }\n\n  /**\n   * @returns {boolean} whether this session is currently in a transaction or not\n   */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param {TransactionOptions} options Options for the transaction\n   */\n  startTransaction(options) {\n    assertAlive(this);\n    if (this.inTransaction()) {\n      throw new MongoError('Transaction already in progress');\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n    if (\n      isSharded(this.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n\n    // create transaction state\n    this.transaction = new Transaction(\n      Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions)\n    );\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  commitTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'commitTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(this, 'commitTransaction', (err, reply) =>\n        err ? reject(err) : resolve(reply)\n      );\n    });\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  abortTransaction(callback) {\n    if (typeof callback === 'function') {\n      endTransaction(this, 'abortTransaction', callback);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      endTransaction(this, 'abortTransaction', (err, reply) =>\n        err ? reject(err) : resolve(reply)\n      );\n    });\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   * @ignore\n   */\n  toBSON() {\n    throw new Error('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * A user provided function to be run within a transaction\n   *\n   * @callback WithTransactionCallback\n   * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\n   * @returns {Promise} The resulting Promise of operations run within this transaction\n   */\n\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param {WithTransactionCallback} fn\n   * @param {TransactionOptions} [options] Optional settings for the transaction\n   */\n  withTransaction(fn, options) {\n    const startTime = Date.now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\nconst UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\nconst MAX_TIME_MS_EXPIRED_CODE = 50;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime, max) {\n  return Date.now() - startTime < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) &&\n      err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE &&\n      err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE)\n  );\n}\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null) return false;\n  return (\n    err.code === MAX_TIME_MS_EXPIRED_CODE ||\n    (err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE)\n  );\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise\n    .then(() => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    })\n    .catch(err => {\n      function maybeRetryOrThrow(err) {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel('TransientTransactionError') &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          if (err.errorLabels == null) {\n            err.errorLabels = [];\n          }\n          err.errorLabels.push('UnknownTransactionCommitResult');\n        }\n\n        throw err;\n      }\n\n      if (session.transaction.isActive) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  }\n\n  // handle any initial problematic cases\n  let txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.w) {\n    writeConcern = { w: session.clientOptions.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName === 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n\n      if (\n        e &&\n        (e instanceof MongoNetworkError ||\n          e instanceof MongoWriteConcernError ||\n          isRetryableError(e) ||\n          isMaxTimeMSExpiredError(e))\n      ) {\n        if (e.errorLabels) {\n          const idx = e.errorLabels.indexOf('TransientTransactionError');\n          if (idx !== -1) {\n            e.errorLabels.splice(idx, 1);\n          }\n        } else {\n          e.errorLabels = [];\n        }\n\n        if (isUnknownTransactionCommitResult(e)) {\n          e.errorLabels.push('UnknownTransactionCommitResult');\n\n          // per txns spec, must unpin session in this case\n          session.transaction.unpinServer();\n        }\n      }\n    } else {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n    }\n\n    callback(e, r);\n  }\n\n  // The spec indicates that we should ignore all errors on `abortTransaction`\n  function transactionError(err) {\n    return commandName === 'commitTransaction' ? err : null;\n  }\n\n  if (\n    // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n    session.transaction.recoveryToken &&\n    supportsRecoveryToken(session)\n  ) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  session.topology.command('admin.$cmd', command, { session }, (err, reply) => {\n    if (err && isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.transaction.unpinServer();\n\n        command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return session.topology.command('admin.$cmd', command, { session }, (_err, _reply) =>\n        commandHandler(transactionError(_err), _reply)\n      );\n    }\n\n    commandHandler(transactionError(err), reply);\n  });\n}\n\nfunction supportsRecoveryToken(session) {\n  const topology = session.topology;\n  return !!topology.s.options.useRecoveryToken;\n}\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @ignore\n */\nclass ServerSession {\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = Date.now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   * @ignore\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\n   * @return {boolean} true if the session has timed out.\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      (((Date.now() - this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @ignore\n */\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n\n  /**\n   * Ends all sessions in the session pool.\n   * @ignore\n   */\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(\n        this.sessions.map(session => session.id),\n        () => {\n          this.sessions = [];\n          if (typeof callback === 'function') {\n            callback();\n          }\n        }\n      );\n\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession\n   * is created.\n   * @ignore\n   * @returns {ServerSession}\n   */\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   * @ignore\n   * @param {ServerSession} session The session to release to the pool\n   */\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n  if (\n    command.aggregate ||\n    command.count ||\n    command.distinct ||\n    command.find ||\n    command.parallelCollectionScan ||\n    command.geoNear ||\n    command.geoSearch\n  ) {\n    return true;\n  }\n\n  if (command.mapReduce && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @ignore\n * @param {ClientSession} session the session tracking transaction state\n * @param {Object} command the command to decorate\n * @param {Object} topology the topology for tracking the cluster time\n * @param {Object} [options] Optional settings passed to calling operation\n * @return {MongoError|null} An error, if some error condition was met\n */\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    return new MongoError('Cannot use a session that has ended');\n  }\n\n  const serverSession = session.serverSession;\n  serverSession.lastUse = Date.now();\n  command.lsid = serverSession.id;\n\n  // first apply non-transaction-specific sessions data\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = options.willRetryWrite;\n  const shouldApplyReadConcern = commandSupportsReadConcern(command);\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  // now attempt to apply transaction-specific sessions data\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    // TODO: the following should only be applied to read operation per spec.\n    // for causal consistency\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n\n    return;\n  }\n\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\n    return new MongoError(\n      `Read preference in a transaction must be primary, not: ${options.readPreference.mode}`\n    );\n  }\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session.clientOptions.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n}\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    resolveClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n}\n\nmodule.exports = {\n  ClientSession,\n  ServerSession,\n  ServerSessionPool,\n  TxnState,\n  applySession,\n  updateSessionFromResponse,\n  commandSupportsReadConcern\n};\n"]},"metadata":{},"sourceType":"script"}