{"ast":null,"code":"var _jsxFileName = \"/home/rgukt/Projects/covid-19/src/components/MobX/mobx.js\";\nimport React from 'react';\nimport { withRouter } from \"react-router\";\nimport { observable, decorate, action, computed } from \"mobx\";\nimport { inject, observer, Observer } from \"mobx-react\";\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      darkmode: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"toggle\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"darkmode\"));\n  }\n\n}\n/*class TodoList extends React.Component {\n    secondsPassed = 0;\n\n    componentDidMount() {\n        setInterval(() => {\n            this.secondsPassed++\n        }, 1000)\n    }\n\n    render() {\n        return <span>Seconds passed: {this.secondsPassed} </span>\n    }\n}\ndecorate(TodoList, {\n  secondsPassed: observable\n})*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=observer(()=><span>Seconds passed: {timerData.secondsPassed} </span>)\n\nexport default withRouter(TodoList);*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=(()=><Observer>{()=><span>Seconds passed: {timerData.secondsPassed} </span>}</Observer>)\n*/\n\n/*class TodoList extends React.Component {\n    tick = 0\n    increment() {\n        this.tick++;\n        console.log(this.tick);\n    }\n    render() {\n        console.log(\"hello\");\n        return <span>Seconds passed: {this.tick} </span>\n    }\n}\ndecorate(TodoList,{\n    tick:observable,\n    increment:action.bound\n})\n\nconst ticker = new TodoList();\nsetInterval(ticker.increment, 1000);\n*/\n\n/*class TodoList {\n    price = 0\n    amount = 1\n\n    constructor(price) {\n        this.price = price\n    }\n\n    get total() {\n        return this.price * this.amount\n    }\n}\ndecorate(OrderLine, {\n    price: observable,\n    amount: observable,\n    total: computed\n})\n*/\n\n\nexport default withRouter(observer(TodoList));","map":{"version":3,"sources":["/home/rgukt/Projects/covid-19/src/components/MobX/mobx.js"],"names":["React","withRouter","observable","decorate","action","computed","inject","observer","Observer","TodoList","Component","constructor","props","state","darkmode","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAsCC,QAAtC,QAAsD,MAAtD;AACA,SAAQC,MAAR,EAAgBC,QAAhB,EAAyBC,QAAzB,QAAwC,YAAxC;;AAIA,MAAMC,QAAN,SAAuBT,KAAK,CAACU,SAA7B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,QAAQ,EAAC;AADF,KAAX;AAGH;;AACDC,EAAAA,MAAM,GAAE;AACJ,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CADA;AAMH;;AAdiC;AAiBtC;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;AAoBA,eAAed,UAAU,CAACM,QAAQ,CAACE,QAAD,CAAT,CAAzB","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router\";\nimport { observable, decorate, action,computed } from \"mobx\";\nimport {inject, observer,Observer} from \"mobx-react\";\n\n\n\nclass TodoList extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            darkmode:false\n        }\n    }\n    render(){\n        return(\n        <div>\n            <button>toggle</button>\n            <h1>darkmode</h1>\n        </div>\n        );\n    }\n}\n\n/*class TodoList extends React.Component {\n    secondsPassed = 0;\n\n    componentDidMount() {\n        setInterval(() => {\n            this.secondsPassed++\n        }, 1000)\n    }\n\n    render() {\n        return <span>Seconds passed: {this.secondsPassed} </span>\n    }\n}\ndecorate(TodoList, {\n  secondsPassed: observable\n})*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=observer(()=><span>Seconds passed: {timerData.secondsPassed} </span>)\n\nexport default withRouter(TodoList);*/\n\n/*let timerData = observable({\n    secondsPassed: 0\n})\n\nsetInterval(() => {\n    timerData.secondsPassed++\n}, 1000)\n\nconst TodoList=(()=><Observer>{()=><span>Seconds passed: {timerData.secondsPassed} </span>}</Observer>)\n*/\n\n/*class TodoList extends React.Component {\n    tick = 0\n    increment() {\n        this.tick++;\n        console.log(this.tick);\n    }\n    render() {\n        console.log(\"hello\");\n        return <span>Seconds passed: {this.tick} </span>\n    }\n}\ndecorate(TodoList,{\n    tick:observable,\n    increment:action.bound\n})\n\nconst ticker = new TodoList();\nsetInterval(ticker.increment, 1000);\n*/\n\n/*class TodoList {\n    price = 0\n    amount = 1\n\n    constructor(price) {\n        this.price = price\n    }\n\n    get total() {\n        return this.price * this.amount\n    }\n}\ndecorate(OrderLine, {\n    price: observable,\n    amount: observable,\n    total: computed\n})\n*/\n\n\nexport default withRouter(observer(TodoList));\n"]},"metadata":{},"sourceType":"module"}