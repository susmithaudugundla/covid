{"version":3,"sources":["components/countriesData/country.js","components/countriesData/data.js","components/countriesData/countryInfo.js","serviceWorker.js","index.js","App.js","components/countriesData/index.svg"],"names":["Country","props","change","getCountryInfo","individual","country","countryInfo","className","onClick","this","src","flag","alt","name","population","region","capital","React","Component","withRouter","Data","event","target","value","setState","dataEl","tempCountries","filter","nameSearch","keyCode","matched","stri","toLowerCase","i","length","includes","push","atleastOneCountry","countryData","history","alpha3Code","location","state","darkmode","fetch","response","json","jsonData","console","log","type","placeholder","onKeyDown","id","onChange","image","map","data","index","key","CovidGraph","covidData","covid19","countryDetails","loadingData","countryId","x","country_iso3","groupByDate","goBack","nativeName","subregion","topLevelDomain","currencies","languages","language","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","PureComponent","Boolean","window","hostname","match","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.dfb69e62.chunk.js","sourcesContent":["import React from 'react';\nimport './country.css';\nimport { withRouter } from \"react-router\";\nimport { Link } from 'react-router-dom';\n\n\nclass Country extends React.Component{\n    constructor(props){\n        super(props);\n        this.individual=props.country;\n        this.getCountryInfo=props.countryInfo;\n    }\n    change=()=>{\n          this.getCountryInfo(this.individual);\n    }\n    render(){\n            return(\n                    <div className=\"card\" onClick={this.change}>\n                        <img src={this.individual.flag} alt=\"Country-flag\"></img>\n                        <h4>{this.individual.name}</h4>\n                        <div><p className=\"bold\">population: <span className=\"span-bold\">{this.individual.population}</span></p></div>\n                        <div><p className=\"bold\">Region: <span className=\"span-bold\">{this.individual.region}</span></p></div>\n                        <div><p className=\"bold\">Capital: <span className=\"span-bold\">{this.individual.capital}</span></p></div>\n                    </div>\n             \n            )\n    }\n}\nexport default withRouter(Country);\n","import React from 'react';\nimport Country from './country.js';\nimport './country.css';\nimport { withRouter } from \"react-router\";\nimport image from './index.svg'\nclass Data extends React.Component{\n    constructor(props){\n       super(props)\n        this.state={\n            dataEl:[],\n            darkmode:false\n        }\n        this.tempCountries=[];\n    }\n   async componentDidMount(){\n\n       let response=await fetch('http://restcountries.eu/rest/v2/all');\n       let jsonData=await response.json();\n       this.tempCountries=jsonData;\n       this.setState({\n           dataEl:jsonData\n       })\n       this.atleastOneCountry=false\n\n   }\n   region=(event)=>{\n       if(event.target.value===\"all\"){\n        this.setState({\n            dataEl:this.tempCountries\n        })\n       }\n       else{\n        this.setState({\n            dataEl:this.tempCountries.filter((region)=>region.region===event.target.value)\n        })\n       }\n   }\n   nameSearch=(event)=>{\n       if(event.keyCode===13){\n           let  matched=[];\n           let stri=event.target.value.toLowerCase();\n           for(let i=0;i<this.tempCountries.length;i++){\n               let matchedCountries=this.tempCountries[i].name.toLowerCase().includes(stri);\n               if(matchedCountries){\n                   \n                    matched.push(this.tempCountries[i])\n               }\n           }\n           this.atleastOneCountry=true;\n        this.setState({\n            dataEl:matched\n        })\n       }\n   }\n   getCountryInfo=(countryData)=>{\n    const {history}=this.props;\n    this.props.history.push(`/countriesId/:${countryData.alpha3Code}`);\n    this.props.history.location.state=countryData;\n   }\n    render(){\n    \tconsole.log(this.state.dataEl);\n        if(this.state.dataEl.length===0)\n        {\n            if(!this.atleastOneCountry)\n            {\n            return(\n                <div className=\"loading\">\n                    <img src={image} alt=\"Loading\"></img>\n                </div>\n            )\n            }\n            else{\n                return(\n                    <div className=\"body-background\">\n                        <div className=\"search-bar\">  \n                            <input type=\"text\" placeholder=\"search for a country...\" onKeyDown={this.nameSearch}></input>\n                            <select id=\"region\" onChange={this.region} name=\"region\">\n                                <option value=\"all\">All</option>\n                                <option value=\"Asia\">Asia</option>\n                                <option value=\"Africa\">Africa</option>\n                                <option value=\"Americas\">Americas</option>\n                                <option value=\"Europe\">Europe</option>\n                                <option value=\"Oceania\">Oceania</option>\n                            </select>\n                        </div>\n                    </div>\n                \n               )\n            }\n        }\n        else{\n            return(\n                <div className=\"body-background\">\n                    <div className=\"search-bar\">  \n                        <input type=\"text\" placeholder=\"search for a country...\" onKeyDown={this.nameSearch}></input>\n                        <select id=\"region\" onChange={this.region} name=\"region\">\n                            <option value=\"all\">All</option>\n                            <option value=\"Asia\">Asia</option>\n                            <option value=\"Africa\">Africa</option>\n                            <option value=\"Americas\">Americas</option>\n                            <option value=\"Europe\">Europe</option>\n                            <option value=\"Oceania\">Oceania</option>\n                        </select>\n                    </div>\n                    <div className=\"display-property\">{this.state.dataEl.map((data,index)=> <Country countryInfo={this.getCountryInfo} country={data} key={data.name}/> )}</div>        \n                </div>\n            \n           )\n        }\n        \n    }\n}\nexport default withRouter(Data);\n","/*global covid19*/\nimport React, { PureComponent } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport { withRouter } from 'react-router-dom';\nimport country from './country';\nimport './country.css';\nimport image from './index.svg'\n\nclass CovidGraph extends PureComponent {\n  constructor(props){\n    super(props);\n    this.state={\n      covidData:covid19.data(),\n      countryDetails:this.props.history.location.state\n    }\n    this.loadingData=false;\n  }\n  async componentDidMount(){\n    let countryId=this.props.history.location.state;\n    this.loadingData=true;\n    this.setState({\n      covidData:this.state.covidData.filter(x=>x.country_iso3===countryId.alpha3Code).groupByDate()\n    });\n  }\n  \n  render() {\n    if(this.loadingData){\n      return (\n        <div className=\"country-info\">\n          <button onClick={this.props.history.goBack}>Back</button>\n        <div className=\"covid-details\">\n          \n          <div className=\"w-five img-center\">\n          <img src={this.state.countryDetails.flag} alt=\"Country-flag\"></img>\n          </div>\n          <div className=\"w-four\">\n            <div className=\"covid-details margin-0\">\n            <div className=\"w-four\">\n            <h4>{this.state.countryDetails.name}</h4>\n          <p><span className=\"bold\">Native Name : </span> {this.state.countryDetails.nativeName}</p>\n          <p><span className=\"bold\">Population : </span> {this.state.countryDetails.population}</p>\n          <p><span className=\"bold\">Region : </span> {this.state.countryDetails.region}</p>\n          <p><span className=\"bold\">Sub Region : </span> {this.state.countryDetails.subregion}</p>\n          <p><span className=\"bold\">Capital : </span> {this.state.countryDetails.capital}</p>\n          \n            </div>\n            <div className=\"w-four\">\n            <p><span className=\"bold\">Top Level Domain : </span> {this.state.countryDetails.topLevelDomain[0]}</p>\n          <p><span className=\"bold\">Currencies : </span> {this.state.countryDetails.currencies[0].name}</p>\n          <p><span className=\"bold\">Languages : </span> {this.state.countryDetails.languages.map(language=>language.name)}</p>\n            </div>\n            </div>\n            \n\n          \n          <h3>Covid-19 Report</h3>\n          <LineChart\n          width={500}\n          height={300}\n          data={this.state.covidData}\n          margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n          }}\n      >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#f0190a\" activeDot={{ r: 8 }} />\n          <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#05a608\" />\n          <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"#1753d4\" />\n      </LineChart>\n          </div>\n      \n      </div>\n      </div>\n        );\n    }\n    else{\n      return(\n        <div className=\"loading\">\n            <img src={image} alt=\"Loading\"></img>\n        </div>\n    )\n    }\n    \n    }\n}\nexport default withRouter(CovidGraph);\n\n/*import React, { PureComponent } from 'react';\n\nimport { withRouter } from 'react-router-dom';\n\nclass Example extends React.Component{\n    constructor(props){\n        super(props);\n        console.log(this.props.countryId);\n    }\n}\nexport default withRouter(Example);*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Data from './components/countriesData/data.js';\nimport CovidGraph from './components/countriesData/countryInfo.js';\n\nexport default function App() {\n  return (\n    <Router> \n      <div>   \n        <Switch>\n        \t<Route exact path={`/countriesId/:countryId`}>\n        \t\t<CovidGraph/>\n  \t\t\t</Route>\n        \t<Route path=\"/\">\n            \t<Data />\n        \t</Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/index.77eb48c3.svg\";"],"sourceRoot":""}